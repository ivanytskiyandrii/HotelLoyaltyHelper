import logging
import openai
import os
from aiogram import Bot, Dispatcher, executor, types
from dotenv import load_dotenv
import urllib.parse

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

user_data = {}

questions = [
    "–Ø–∫–∏–π —Å—Ç–∏–ª—å –≥–æ—Ç–µ–ª—ñ–≤ —Ç–æ–±—ñ –±–ª–∏–∂—á–µ?",
    "–Ø–∫–∞ —Ü—ñ–Ω–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —Ç–æ–±—ñ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å?",
    "–ù–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤–∞ –≤–µ–ª–∏–∫–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Ç–µ–ª—ñ–≤?",
    "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –ø—Ä–æ —Å–≤–æ—ó –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è: —â–æ —Ç–æ–±—ñ –≤–∞–∂–ª–∏–≤–æ –≤ –≥–æ—Ç–µ–ª—ñ, —Å–µ—Ä–≤—ñ—Å—ñ –∞–±–æ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É.",
    "üèôÔ∏è –í —è–∫–µ –º—ñ—Å—Ç–æ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –ø–æ–¥–æ—Ä–æ–∂?"
]

style_kb = types.ReplyKeyboardMarkup(resize_keyboard=True).add("Cozy", "Modern", "Classic")
price_kb = types.ReplyKeyboardMarkup(resize_keyboard=True).add("Economy", "Midscale", "Upscale", "Upper Upscale", "Luxury")
quantity_kb = types.ReplyKeyboardMarkup(resize_keyboard=True).add("High", "Medium", "Low")

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π –ø—ñ–¥–±–µ—Ä–µ–º–æ –ø—Ä–æ–≥—Ä–∞–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ.")
    await message.answer(f"–ü–∏—Ç–∞–Ω–Ω—è 1/5: {questions[0]}", reply_markup=style_kb)

@dp.message_handler(lambda m: m.text in ["Cozy", "Modern", "Classic"])
async def handle_style(message: types.Message):
    user_data[message.from_user.id]["style"] = message.text
    await message.answer(f"–ü–∏—Ç–∞–Ω–Ω—è 2/5: {questions[1]}", reply_markup=price_kb)

@dp.message_handler(lambda m: m.text in ["Economy", "Midscale", "Upscale", "Upper Upscale", "Luxury"])
async def handle_price(message: types.Message):
    user_data[message.from_user.id]["price"] = message.text
    await message.answer(f"–ü–∏—Ç–∞–Ω–Ω—è 3/5: {questions[2]}", reply_markup=quantity_kb)

@dp.message_handler(lambda m: m.text in ["High", "Medium", "Low"])
async def handle_quantity(message: types.Message):
    user_data[message.from_user.id]["quantity"] = message.text
    await message.answer(f"–ü–∏—Ç–∞–Ω–Ω—è 4/5: {questions[3]}", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda m: "preferences" not in user_data.get(m.from_user.id, {}))
async def handle_preferences(message: types.Message):
    user_data[message.from_user.id]["preferences"] = message.text
    await message.answer(f"–ü–∏—Ç–∞–Ω–Ω—è 5/5: {questions[4]}")

@dp.message_handler(lambda m: "destination" not in user_data.get(m.from_user.id, {}))
async def handle_destination(message: types.Message):
    user_data[message.from_user.id]["destination"] = message.text
    data = user_data[message.from_user.id]

    prompt = f"""
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞—î –≥–æ—Ç–µ–ª—å –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:
- –°—Ç–∏–ª—å –≥–æ—Ç–µ–ª—é: {data['style']}
- –¶—ñ–Ω–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {data['price']}
- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ—Ç–µ–ª—ñ–≤ —É –º–µ—Ä–µ–∂—ñ –≤–∞–∂–ª–∏–≤–∞: {data['quantity']}
- –í–ø–æ–¥–æ–±–∞–Ω–Ω—è: {data['preferences']}
- –ú—ñ—Å—Ç–æ –∞–±–æ –∫—Ä–∞—ó–Ω–∞: {data['destination']}

–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π:
1. –ù–∞–∑–≤—É –±—Ä–µ–Ω–¥—É —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ, —è–∫–∞ –Ω–∞–π–∫—Ä–∞—â–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å.
2. –ö–æ—Ä–æ—Ç–∫–æ –≤–∫–∞–∂–∏ –ø–µ—Ä–µ–≤–∞–≥–∏ –ø—Ä–æ–≥—Ä–∞–º–∏.
3. –ü—Ä–∏–∫–ª–∞–¥ –≥–æ—Ç–µ–ª—é –≤ —Ü—å–æ–º—É –º—ñ—Å—Ç—ñ (–Ω–∞–∑–≤–∞).
4. –¢–æ—á–Ω—É –Ω–∞–∑–≤—É –≥–æ—Ç–µ–ª—é –æ–∫—Ä–µ–º–æ.
6. –Ø–∫—â–æ –º–æ–∂–ª–∏–≤–æ, –¥–æ–¥–∞–π —Ü—ñ–∫–∞–≤—É –∞–±–æ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—É –¥–µ—Ç–∞–ª—å, –ø–æ–≤'—è–∑–∞–Ω—É –∑ –≥–æ—Ç–µ–ª–µ–º –∞–±–æ –º—ñ—Å—Ü–µ–º.
"""

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.8,
        max_tokens=800
    )

    reply = response.choices[0].message.content

    hotel_lines = [line for line in reply.split('\n') if line.strip().startswith("4.")]
    hotel_name = hotel_lines[0][2:].strip() if hotel_lines else data["destination"]
    query = urllib.parse.quote(f"{hotel_name}, {data['destination']}")
    google_maps_url = f"https://www.google.com/maps/search/?api=1&query={query}"

    await message.answer(f"üìå –û—Å—å —â–æ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n{reply}\n\nüìç –ü–µ—Ä–µ–≥–ª—è–Ω—å –Ω–∞ Google Maps: {google_maps_url}")

if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    executor.start_polling(dp)
